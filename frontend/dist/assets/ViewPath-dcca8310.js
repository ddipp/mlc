import{d as m,b as v,e as c,o as f,c as g,a as t,f as h,w as p,v as b,u as s,t as d,g as j,F as z,h as P}from"./index-c725121e.js";const w=m("path",{state:()=>({job_id:"",job_status:"",job_poolinterval:"",la_a:"",lo_a:"",la_b:"",lo_b:"",distance:"",arc_distance:"",az_a_b:"",az_b_a:"",p_a_elevation:"",p_b_elevation:"",profile_name:"",profile_url:v.defaults.baseURL+"/profile_get/",changed:!1}),actions:{async get_job_status(){try{const e=await v.get(`/profile_check/${this.job_id}`);this.job_status=e.data.job_status,this.changed=!0,this.job_status==="finished"&&(clearInterval(this.job_poolinterval),this.distance=e.data.distance,this.az_a_b=e.data.az_a_b,this.az_b_a=e.data.az_b_a,this.p_a_elevation=e.data.p_a_elevation,this.p_b_elevation=e.data.p_b_elevation,this.profile_name=e.data.profile_name)}catch(e){alert(e)}},async calculate(){this.distance="",this.az_a_b="",this.az_b_a="",this.p_a_elevation="",this.p_b_elevation="",this.profile_name="";const e=1e6,a=parseInt(this.la_a*e,10),_=parseInt(this.lo_a*e,10),r=parseInt(this.la_b*e,10),u=parseInt(this.lo_b*e,10);try{const l=await v.get(`/profile_add_task/${a}/${_}/${r}/${u}`);this.job_id=l.data.job_id,this.job_status=l.data.job_status,this.changed=!0,this.job_status!=="finished"?(this.job_poolinterval=setInterval(()=>{this.get_job_status()},1e3),setTimeout(()=>{clearInterval(this.job_poolinterval)},6e4)):(this.distance=l.data.distance,this.az_a_b=l.data.az_a_b,this.az_b_a=l.data.az_b_a,this.p_a_elevation=l.data.p_a_elevation,this.p_b_elevation=l.data.p_b_elevation,this.profile_name=l.data.profile_name)}catch(l){alert(l)}}}}),L=t("h3",null,"Find all points and their elevations between the given ones every 10 meters",-1),V=t("legend",null,"Point A",-1),B={class:"grid"},$={for:"la_a"},k={for:"lo_a"},y=t("legend",null,"Point B",-1),A={class:"grid"},I={for:"la_b"},x={for:"lo_b"},C={key:0,class:"answer"},U=["src"],N={__name:"ComponentPath",setup(e){const a=w(),_=c({get(){return a.la_a},set(i){a.la_a=i,a.changed=!1}}),r=c({get(){return a.la_b},set(i){a.la_b=i,a.changed=!1}}),u=c({get(){return a.lo_a},set(i){a.lo_a=i,a.changed=!1}}),l=c({get(){return a.lo_b},set(i){a.lo_b=i,a.changed=!1}});return(i,o)=>(f(),g(z,null,[L,t("fieldset",null,[V,t("div",B,[t("label",$,[h(" Latitude "),p(t("input",{id:"la_a","onUpdate:modelValue":o[0]||(o[0]=n=>_.value=n),placeholder:"Latitude"},null,512),[[b,_.value]])]),t("label",k,[h(" Longitude "),p(t("input",{id:"lo_a","onUpdate:modelValue":o[1]||(o[1]=n=>u.value=n),placeholder:"Longitude"},null,512),[[b,u.value]])])])]),t("fieldset",null,[y,t("div",A,[t("label",I,[h(" Latitude "),p(t("input",{id:"la_b","onUpdate:modelValue":o[2]||(o[2]=n=>r.value=n),placeholder:"Latitude"},null,512),[[b,r.value]])]),t("label",x,[h(" Longitude "),p(t("input",{id:"lo_b","onUpdate:modelValue":o[3]||(o[3]=n=>l.value=n),placeholder:"Longitude"},null,512),[[b,l.value]])])])]),t("button",{onClick:o[4]||(o[4]=n=>s(a).calculate())},"Calculate"),s(a).changed?(f(),g("div",C,[t("fieldset",null,[t("ul",null,[t("li",null,"Distance between two points in kilometers in a straight line "+d(s(a).distance),1),t("li",null,"Cource from Point A to Point B "+d(s(a).az_a_b)+"°",1),t("li",null,"Cource from Point B to Point A "+d(s(a).az_b_a)+"°",1),t("li",null,"Point A. Altitude "+d(s(a).p_a_elevation)+" m",1),t("li",null,"Point B. Altitude "+d(s(a).p_b_elevation)+" m",1)])]),t("img",{alt:"Profile PointA to PointB",src:s(a).profile_url+s(a).profile_name},null,8,U)])):j("",!0)],64))}},D={class:"grid"},S={__name:"ViewPath",setup(e){return document.title="Georgaphical path",(a,_)=>(f(),g("div",D,[t("div",null,[P(N)])]))}};export{S as default};
