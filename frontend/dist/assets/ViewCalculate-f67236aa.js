import{d as m,b as $,e as c,o as h,c as g,a as e,f as r,w as p,v as b,u as s,t as d,g as L,F as P,h as f}from"./index-adc2189a.js";const w=m("distance",{state:()=>({la_a:"",lo_a:"",la_b:"",lo_b:"",distance:"",arc_distance:"",az_a_b:"",az_b_a:"",p_a_elevation:"",p_b_elevation:"",changed:!1}),actions:{async calculate(){const t=parseInt(this.la_a*1e6,10),i=parseInt(this.lo_a*1e6,10),_=parseInt(this.la_b*1e6,10),u=parseInt(this.lo_b*1e6,10);try{const a=await $.get(`/distance/${t}/${i}/${_}/${u}`);this.distance=a.data.distance,this.arc_distance=a.data.arc_distance,this.az_a_b=a.data.az_a_b,this.az_b_a=a.data.az_b_a,this.p_a_elevation=a.data.p_a_elevation,this.p_b_elevation=a.data.p_b_elevation,this.changed=!0}catch(a){alert(a)}}}}),x=e("h3",null,"Find distance and bearing between two points",-1),V=e("legend",null,"Point A",-1),A={class:"grid"},B={for:"la_a"},C={for:"lo_a"},k=e("legend",null,"Point B",-1),y={class:"grid"},z={for:"la_b"},D={for:"lo_b"},I={key:0,class:"answer"},U={__name:"ComponentDistance",setup(v){const t=w(),i=c({get(){return t.la_a},set(n){t.la_a=n,t.changed=!1}}),_=c({get(){return t.la_b},set(n){t.la_b=n,t.changed=!1}}),u=c({get(){return t.lo_a},set(n){t.lo_a=n,t.changed=!1}}),a=c({get(){return t.lo_b},set(n){t.lo_b=n,t.changed=!1}});return(n,l)=>(h(),g(P,null,[x,e("fieldset",null,[V,e("div",A,[e("label",B,[r(" Latitude "),p(e("input",{id:"la_a","onUpdate:modelValue":l[0]||(l[0]=o=>i.value=o),placeholder:"Latitude"},null,512),[[b,i.value]])]),e("label",C,[r(" Longitude "),p(e("input",{id:"lo_a","onUpdate:modelValue":l[1]||(l[1]=o=>u.value=o),placeholder:"Longitude"},null,512),[[b,u.value]])])])]),e("fieldset",null,[k,e("div",y,[e("label",z,[r(" Latitude "),p(e("input",{id:"la_b","onUpdate:modelValue":l[2]||(l[2]=o=>_.value=o),placeholder:"Latitude"},null,512),[[b,_.value]])]),e("label",D,[r(" Longitude "),p(e("input",{id:"lo_b","onUpdate:modelValue":l[3]||(l[3]=o=>a.value=o),placeholder:"Longitude"},null,512),[[b,a.value]])])])]),e("button",{onClick:l[4]||(l[4]=o=>s(t).calculate())},"Calculate"),s(t).changed?(h(),g("div",I,[e("fieldset",null,[e("ul",null,[e("li",null,"Distance between two points in kilometers in a straight line "+d(s(t).distance),1),e("li",null,"Distance between two points in kilometers on the surface of the planet "+d(s(t).arc_distance),1),e("li",null,"Cource from Point A to Point B "+d(s(t).az_a_b)+"째",1),e("li",null,"Cource from Point B to Point A "+d(s(t).az_b_a)+"째",1),e("li",null,"Point A. Altitude "+d(s(t).p_a_elevation)+" m",1),e("li",null,"Point B. Altitude "+d(s(t).p_b_elevation)+" m",1)])])])):L("",!0)],64))}},N=m("nextpoint",{state:()=>({la_a:"",lo_a:"",la_b:"",lo_b:"",dis:"",bea:"",p_a_elevation:"",p_b_elevation:"",changed:!1}),actions:{async calculate(){const t=parseInt(this.la_a*1e6,10),i=parseInt(this.lo_a*1e6,10),_=parseInt(this.dis*1e6,10),u=parseInt(this.bea*1e6,10);try{const a=await $.get(`/nextpoint/${t}/${i}/${_}/${u}`);this.la_b=a.data.latitude_b,this.lo_b=a.data.longitude_b,this.p_a_elevation=a.data.p_a_elevation,this.p_b_elevation=a.data.p_b_elevation,this.changed=!0}catch(a){alert(a)}}}}),F=e("h3",null,"Find next point by distance and bearing ",-1),S=e("legend",null,"Point A",-1),T={class:"grid"},E={for:"la_a"},M={for:"lo_a"},j={for:"dis"},q={for:"bea"},G={key:0,class:"answer"},H=e("legend",null,"Point A",-1),J=e("legend",null,"Point B",-1),K={__name:"ComponentNextPoint",setup(v){const t=N(),i=c({get(){return t.la_a},set(n){t.la_a=n,t.changed=!1}}),_=c({get(){return t.lo_a},set(n){t.lo_a=n,t.changed=!1}}),u=c({get(){return t.dis},set(n){t.dis=n,t.changed=!1}}),a=c({get(){return t.bea},set(n){t.bea=n,t.changed=!1}});return(n,l)=>(h(),g(P,null,[F,e("fieldset",null,[S,e("div",T,[e("label",E,[r(" Latitude "),p(e("input",{id:"la_a","onUpdate:modelValue":l[0]||(l[0]=o=>i.value=o),placeholder:"Latitude"},null,512),[[b,i.value]])]),e("label",M,[r(" Longitude "),p(e("input",{id:"lo_a","onUpdate:modelValue":l[1]||(l[1]=o=>_.value=o),placeholder:"Longitude"},null,512),[[b,_.value]])]),e("label",j,[r(" Distance "),p(e("input",{id:"dis","onUpdate:modelValue":l[2]||(l[2]=o=>u.value=o),placeholder:"Distance"},null,512),[[b,u.value]])]),e("label",q,[r(" Bearing (째) "),p(e("input",{id:"bea","onUpdate:modelValue":l[3]||(l[3]=o=>a.value=o),placeholder:"Bearing (째)"},null,512),[[b,a.value]])])])]),e("button",{onClick:l[4]||(l[4]=o=>s(t).calculate())},"Calculate"),s(t).changed?(h(),g("div",G,[e("fieldset",null,[H,e("ul",null,[e("li",null,"Altitude "+d(s(t).p_a_elevation)+" m",1)])]),e("fieldset",null,[J,e("ul",null,[e("li",null,"Latitude "+d(s(t).la_b),1),e("li",null,"Longitude "+d(s(t).lo_b),1),e("li",null,"Altitude "+d(s(t).p_b_elevation)+" m",1)])])])):L("",!0)],64))}},O={class:"grid"},R={__name:"ViewCalculate",setup(v){return document.title="Profile radio planner",(t,i)=>(h(),g("div",O,[e("div",null,[f(U)]),e("div",null,[f(K)])]))}};export{R as default};
